{"name":"upload-dropzone-progress","title":"Upload Dropzone with Progress","type":"registry:component","dependencies":["better-upload","lucide-react","react-dropzone"],"registryDependencies":["progress"],"files":[{"path":"registry/better-upload/upload-dropzone-progress.tsx","type":"registry:component","content":"import { Progress } from '@/components/ui/progress';\nimport { cn } from '@/lib/utils';\nimport type { UploadHookControl } from 'better-upload/client';\nimport { formatBytes } from 'better-upload/client/helpers';\nimport { Dot, File, Upload } from 'lucide-react';\nimport { useId } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\ntype UploadDropzoneProgressProps = {\n  control: UploadHookControl<true>;\n  accept?: string;\n  metadata?: Record<string, unknown>;\n  description?:\n    | {\n        fileTypes?: string;\n        maxFileSize?: string;\n        maxFiles?: number;\n      }\n    | string;\n  uploadOverride?: (\n    ...args: Parameters<UploadHookControl<true>['upload']>\n  ) => void;\n\n  // Add any additional props you need.\n};\n\nexport function UploadDropzoneProgress({\n  control: { upload, isPending, progresses },\n  accept,\n  metadata,\n  description,\n  uploadOverride,\n}: UploadDropzoneProgressProps) {\n  const id = useId();\n\n  const { getRootProps, getInputProps, isDragActive, inputRef } = useDropzone({\n    onDrop: (files) => {\n      if (files.length > 0) {\n        if (uploadOverride) {\n          uploadOverride(files, { metadata });\n        } else {\n          upload(files, { metadata });\n        }\n      }\n      inputRef.current.value = '';\n    },\n    noClick: true,\n  });\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <div\n        className={cn(\n          'relative rounded-lg border border-dashed transition-colors',\n          {\n            'border-primary/70': isDragActive,\n          }\n        )}\n      >\n        <label\n          {...getRootProps()}\n          className={cn(\n            'dark:bg-input/10 flex w-full min-w-72 cursor-pointer flex-col items-center justify-center rounded-lg bg-transparent px-2 py-6 transition-colors',\n            {\n              'text-muted-foreground cursor-not-allowed': isPending,\n              'hover:bg-accent dark:hover:bg-accent/30': !isPending,\n            }\n          )}\n          htmlFor={id}\n        >\n          <div className=\"my-2\">\n            <Upload className=\"size-6\" />\n          </div>\n\n          <div className=\"mt-3 space-y-1 text-center\">\n            <p className=\"text-sm font-semibold\">Drag and drop files here</p>\n\n            <p className=\"text-muted-foreground max-w-64 text-xs\">\n              {typeof description === 'string' ? (\n                description\n              ) : (\n                <>\n                  {description?.maxFiles &&\n                    `You can upload ${description.maxFiles} file${description.maxFiles !== 1 ? 's' : ''}.`}{' '}\n                  {description?.maxFileSize &&\n                    `${description.maxFiles !== 1 ? 'Each u' : 'U'}p to ${description.maxFileSize}.`}{' '}\n                  {description?.fileTypes &&\n                    `Accepted ${description.fileTypes}.`}\n                </>\n              )}\n            </p>\n          </div>\n\n          <input\n            {...getInputProps()}\n            type=\"file\"\n            multiple\n            id={id}\n            accept={accept}\n            disabled={isPending}\n          />\n        </label>\n\n        {isDragActive && (\n          <div className=\"bg-background pointer-events-none absolute inset-0 rounded-lg\">\n            <div className=\"dark:bg-accent/30 bg-accent flex size-full flex-col items-center justify-center rounded-lg\">\n              <div className=\"my-2\">\n                <Upload className=\"size-6\" />\n              </div>\n\n              <p className=\"mt-3 text-sm font-semibold\">Drop files here</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"grid gap-2\">\n        {progresses.map((progress) => (\n          <div\n            key={progress.objectKey}\n            className={cn(\n              'dark:bg-input/10 flex items-center gap-2 rounded-lg border bg-transparent p-3',\n              {\n                'bg-red-500/[0.04]! border-red-500/60':\n                  progress.status === 'failed',\n              }\n            )}\n          >\n            <FileIcon type={progress.type} />\n\n            <div className=\"grid grow gap-1\">\n              <div className=\"flex items-center gap-0.5\">\n                <p className=\"max-w-40 truncate text-sm font-medium\">\n                  {progress.name}\n                </p>\n                <Dot className=\"text-muted-foreground size-4\" />\n                <p className=\"text-muted-foreground text-xs\">\n                  {formatBytes(progress.size)}\n                </p>\n              </div>\n\n              <div className=\"flex h-4 items-center\">\n                {progress.progress < 1 && progress.status !== 'failed' ? (\n                  <Progress className=\"h-1.5\" value={progress.progress * 100} />\n                ) : progress.status === 'failed' ? (\n                  <p className=\"text-xs text-red-500\">Failed</p>\n                ) : (\n                  <p className=\"text-muted-foreground text-xs\">Completed</p>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nconst iconCaptions = {\n  'image/': 'IMG',\n  'video/': 'VID',\n  'audio/': 'AUD',\n  'application/pdf': 'PDF',\n  'application/zip': 'ZIP',\n  'application/x-rar-compressed': 'RAR',\n  'application/x-7z-compressed': '7Z',\n  'application/x-tar': 'TAR',\n  'application/json': 'JSON',\n  'application/javascript': 'JS',\n  'text/plain': 'TXT',\n  'text/csv': 'CSV',\n  'text/html': 'HTML',\n  'text/css': 'CSS',\n  'application/xml': 'XML',\n  'application/x-sh': 'SH',\n  'application/x-python-code': 'PY',\n  'application/x-executable': 'EXE',\n  'application/x-disk-image': 'ISO',\n};\n\nfunction FileIcon({ type }: { type: string }) {\n  const caption = Object.entries(iconCaptions).find(([key]) =>\n    type.startsWith(key)\n  )?.[1];\n\n  return (\n    <div className=\"relative shrink-0\">\n      <File className=\"text-muted-foreground size-12\" strokeWidth={1} />\n\n      {caption && (\n        <span className=\"bg-primary text-primary-foreground absolute bottom-2.5 left-0.5 select-none rounded px-1 py-px text-xs font-semibold\">\n          {caption}\n        </span>\n      )}\n    </div>\n  );\n}\n"}]}