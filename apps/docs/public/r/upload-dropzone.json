{"name":"upload-dropzone","title":"Upload Dropzone","type":"registry:component","dependencies":["better-upload","lucide-react","react-dropzone"],"registryDependencies":[],"files":[{"path":"registry/better-upload/upload-dropzone.tsx","type":"registry:component","content":"import { cn } from '@/lib/utils';\r\nimport type { UploadHookControl } from 'better-upload/client';\r\nimport { Loader2, Upload } from 'lucide-react';\r\nimport { useId } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\n\r\ntype UploadDropzoneProps = {\r\n  control: UploadHookControl<true>;\r\n  accept?: string;\r\n  metadata?: Record<string, unknown>;\r\n  description?:\r\n    | {\r\n        fileTypes?: string;\r\n        maxFileSize?: string;\r\n        maxFiles?: number;\r\n      }\r\n    | string;\r\n  uploadOverride?: (\r\n    ...args: Parameters<UploadHookControl<true>['upload']>\r\n  ) => void;\r\n\r\n  // Add any additional props you need.\r\n};\r\n\r\nexport function UploadDropzone({\r\n  control: { upload, isPending },\r\n  accept,\r\n  metadata,\r\n  description,\r\n  uploadOverride,\r\n}: UploadDropzoneProps) {\r\n  const id = useId();\r\n\r\n  const { getRootProps, getInputProps, isDragActive, inputRef } = useDropzone({\r\n    onDrop: (files) => {\r\n      if (files.length > 0 && !isPending) {\r\n        if (uploadOverride) {\r\n          uploadOverride(files, { metadata });\r\n        } else {\r\n          upload(files, { metadata });\r\n        }\r\n      }\r\n      inputRef.current.value = '';\r\n    },\r\n    noClick: true,\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        'border-input relative rounded-lg border border-dashed transition-colors',\r\n        {\r\n          'border-primary/80': isDragActive,\r\n        }\r\n      )}\r\n    >\r\n      <label\r\n        {...getRootProps()}\r\n        className={cn(\r\n          'dark:bg-input/10 flex w-full min-w-72 cursor-pointer flex-col items-center justify-center rounded-lg bg-transparent px-2 py-6 transition-colors',\r\n          {\r\n            'text-muted-foreground cursor-not-allowed': isPending,\r\n            'hover:bg-accent dark:hover:bg-accent/30': !isPending,\r\n          }\r\n        )}\r\n        htmlFor={id}\r\n      >\r\n        <div className=\"my-2\">\r\n          {isPending ? (\r\n            <Loader2 className=\"size-6 animate-spin\" />\r\n          ) : (\r\n            <Upload className=\"size-6\" />\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"mt-3 space-y-1 text-center\">\r\n          <p className=\"text-sm font-semibold\">Drag and drop files here</p>\r\n\r\n          <p className=\"text-muted-foreground max-w-64 text-xs\">\r\n            {typeof description === 'string' ? (\r\n              description\r\n            ) : (\r\n              <>\r\n                {description?.maxFiles &&\r\n                  `You can upload ${description.maxFiles} file${description.maxFiles !== 1 ? 's' : ''}.`}{' '}\r\n                {description?.maxFileSize &&\r\n                  `${description.maxFiles !== 1 ? 'Each u' : 'U'}p to ${description.maxFileSize}.`}{' '}\r\n                {description?.fileTypes && `Accepted ${description.fileTypes}.`}\r\n              </>\r\n            )}\r\n          </p>\r\n        </div>\r\n\r\n        <input\r\n          {...getInputProps()}\r\n          type=\"file\"\r\n          multiple\r\n          id={id}\r\n          accept={accept}\r\n          disabled={isPending}\r\n        />\r\n      </label>\r\n\r\n      {isDragActive && (\r\n        <div className=\"bg-background pointer-events-none absolute inset-0 rounded-lg\">\r\n          <div className=\"dark:bg-accent/30 bg-accent flex size-full flex-col items-center justify-center rounded-lg\">\r\n            <div className=\"my-2\">\r\n              <Upload className=\"size-6\" />\r\n            </div>\r\n\r\n            <p className=\"mt-3 text-sm font-semibold\">Drop files here</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"}]}